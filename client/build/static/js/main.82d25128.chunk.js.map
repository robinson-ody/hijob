{"version":3,"sources":["assets/logo.png","components/Navbar.jsx","pages/Home.jsx","Routes.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","state","scrolled","document","body","onscroll","ev","target","scrollingElement","scrollTop","setState","className","style","this","backgroundColor","padding","position","href","src","require","alt","width","marginTop","fontSize","Component","componentName","xmlns","viewBox","d","fill","stroke","strokeMiterlimit","strokeWidth","x1","y1","x2","y2","strokeLinecap","type","placeholder","App","path","Boolean","window","location","hostname","match","ReactDOM","render","Routes","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLAAAA,EAAOC,QAAU,IAA0B,kC,0JC2F5BC,G,wDAvFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAU,GAJK,E,gEAQE,IAAD,OAClBC,SAASC,KAAKC,SAAW,SAACC,GACxB,OAAIA,EAAGC,OAAOC,iBAAiBC,UAAY,GAClC,EAAKC,SAAS,CAAER,UAAU,IAE5B,EAAKQ,SAAS,CAAER,UAAU,O,+BAKnC,OACE,yBACES,UAAU,SACVC,MACEC,KAAKZ,MAAMC,SACP,CACEY,gBAAiB,QACjBC,QAAS,aACTC,SAAU,SAEZ,IAGN,yBAAKL,UAAU,kBACb,yBAAKM,KAAK,KACR,yBACEC,IAAKC,EAAQ,IACbC,IAAI,OACJT,UAAU,OACVC,MAAOC,KAAKZ,MAAMC,SAAW,CAAEmB,MAAO,QAASC,UAAW,OAAU,MAIxE,yBACEX,UAAU,WACVM,KAAK,IACLL,MAAOC,KAAKZ,MAAMC,SAAW,CAAEqB,SAAU,QAAW,IAHtD,gBAQA,yBACEZ,UAAU,WACVM,KAAK,IACLL,MAAOC,KAAKZ,MAAMC,SAAW,CAAEqB,SAAU,QAAW,IAHtD,WAQA,yBACEZ,UAAU,WACVM,KAAK,IACLL,MAAOC,KAAKZ,MAAMC,SAAW,CAAEqB,SAAU,QAAW,IAHtD,WAQA,yBACEZ,UAAU,WACVM,KAAK,IACLL,MAAOC,KAAKZ,MAAMC,SAAW,CAAEqB,SAAU,QAAW,IAHtD,UASF,yBACEZ,UAAU,0BACVC,MACEC,KAAKZ,MAAMC,SAAW,CAAEa,QAAS,YAAaQ,SAAU,QAAW,IAHvE,c,GA3EaC,cCAAC,G,6KAEjB,OACE,yBAAKd,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,4BACb,kEAEA,yBAAKA,UAAU,UACb,yBACEe,MAAM,6BACNC,QAAQ,cACRhB,UAAU,eAEV,gDACA,0BACEiB,EAAE,4EACFhB,MAAO,CACLiB,KAAM,OACNC,OAAQ,UACRC,iBAAkB,GAClBC,YAAa,UAGjB,0BACEC,GAAG,SACHC,GAAG,SACHC,GAAG,MACHC,GAAG,MACHxB,MAAO,CACLiB,KAAM,OACNC,OAAQ,UACRO,cAAe,QACfN,iBAAkB,GAClBC,YAAa,WAKnB,2BAAOM,KAAK,OAAOC,YAAY,cAC/B,yBAAK5B,UAAU,mBAAf,WAGF,2CACc,IACZ,uBAAGM,KAAK,iCAAiCN,UAAU,eAAnD,iBAEK,IAJP,eAKe,IACb,uBAAGM,KAAK,+BAA+BN,UAAU,eAAjD,wB,GAjD6Ba,cCkB5BgB,MAhBf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,KAAK,KACV,kBAAC,EAAD,WCDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAACC,EAAD,MAAY9C,SAAS+C,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.82d25128.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c4b960cb.png\";","import React, { Component } from 'react';\nimport './css/Navbar.css';\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      scrolled: false,\n    };\n  }\n\n  componentDidMount() {\n    document.body.onscroll = (ev) => {\n      if (ev.target.scrollingElement.scrollTop < 45)\n        return this.setState({ scrolled: false });\n\n      return this.setState({ scrolled: true });\n    };\n  }\n\n  render() {\n    return (\n      <div\n        className='navbar'\n        style={\n          this.state.scrolled\n            ? {\n                backgroundColor: 'white',\n                padding: '15px 100px',\n                position: 'fixed',\n              }\n            : {}\n        }\n      >\n        <div className='link_container'>\n          <div href='#'>\n            <img\n              src={require('../assets/logo.png')}\n              alt='Logo'\n              className='logo'\n              style={this.state.scrolled ? { width: '100px', marginTop: '5px' } : {}}\n            />\n          </div>\n\n          <div\n            className='nav_link'\n            href='#'\n            style={this.state.scrolled ? { fontSize: '16px' } : {}}\n          >\n            How it works\n          </div>\n\n          <div\n            className='nav_link'\n            href='#'\n            style={this.state.scrolled ? { fontSize: '16px' } : {}}\n          >\n            Explore\n          </div>\n\n          <div\n            className='nav_link'\n            href='#'\n            style={this.state.scrolled ? { fontSize: '16px' } : {}}\n          >\n            Company\n          </div>\n\n          <div\n            className='nav_link'\n            href='#'\n            style={this.state.scrolled ? { fontSize: '16px' } : {}}\n          >\n            Plans\n          </div>\n        </div>\n\n        <div\n          className='btn btn-primary nav-btn'\n          style={\n            this.state.scrolled ? { padding: '15px 25px', fontSize: '16px' } : {}\n          }\n        >\n          Login\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport './css/Home.css';\n\nexport default class componentName extends Component {\n  render() {\n    return (\n      <div className='Home'>\n        <div className='hero_section'>\n          <div className='container hero_container'>\n            <h1>Find a job that suits your passion</h1>\n\n            <div className='search'>\n              <svg\n                xmlns='http://www.w3.org/2000/svg'\n                viewBox='0 0 512 512'\n                className='search_icon'\n              >\n                <title>ionicons-v5-f</title>\n                <path\n                  d='M221.09,64A157.09,157.09,0,1,0,378.18,221.09,157.1,157.1,0,0,0,221.09,64Z'\n                  style={{\n                    fill: 'none',\n                    stroke: '#d0d1d5',\n                    strokeMiterlimit: 10,\n                    strokeWidth: '48px',\n                  }}\n                />\n                <line\n                  x1='338.29'\n                  y1='338.29'\n                  x2='448'\n                  y2='448'\n                  style={{\n                    fill: 'none',\n                    stroke: '#d0d1d5',\n                    strokeLinecap: 'round',\n                    strokeMiterlimit: 10,\n                    strokeWidth: '48px',\n                  }}\n                />\n              </svg>\n\n              <input type='text' placeholder='Job Title' />\n              <div className='btn btn-primary'>Search</div>\n            </div>\n\n            <div>\n              Designed by{' '}\n              <a href='https://dribbble.com/uiwithvin' className='author_name'>\n                Steve Gunawan\n              </a>{' '}\n              and Built by{' '}\n              <a href='linkedin.com/in/robinson-ody' className='author_name'>\n                Robinson Ody\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Home from './pages/Home.jsx';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Router>\n        <Navbar />\n\n        <Switch>\n          <Route path='/'>\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Reset before importing new base css\nimport './reset.css';\nimport './root.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}